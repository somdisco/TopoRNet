% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trnobj_doc.R
\name{TRN}
\alias{TRN}
\title{The TRN object class}
\description{
The TRN object class
}
\section{Fields}{

\describe{
\item{\code{parallel}}{Flag indicating whether computations should be performed in parallel, using the RcppParallel package.}

\item{\code{nV}}{Number of vertices in the TRN.}

\item{\code{CADJ_nE}}{Number of edges in the CADJ graph.}

\item{\code{CONN_nE}}{Number of edges in the CONN graph.}

\item{\code{OT_nE}}{Number of edges in the output space topology of the TRN (i.e., the SOM lattice).}

\item{\code{CADJ_EL}}{List of CADJ edges. 
This is a 2-column matrix whose rows define the vertices connected by each CADJ edge.}

\item{\code{CONN_EL}}{List of CONN edges. 
This is a 2-column matrix whose rows define the vertices connected by each CONN edge.}

\item{\code{OT_EL}}{List of edges in the output space topology of the TRN. 
This is a 2-column matrix whose rows define the vertices connected by each output space edge.}

\item{\code{CADJ}}{Weights of each CADJ edge defined in \code{CADJ_EL}.
This is a vector of \code{length = nrow(CADJ_EL)}.}

\item{\code{CONN}}{Weights of each CONN edge defined in \code{CONN_EL}.
This is a vector of \code{length = nrow(CONN_EL)}.}

\item{\code{CADJ_deg}}{The degree (number of incident edges) of each TRN vertex, according to the CADJ graph.}

\item{\code{CONN_deg}}{The degree (number of incident edges) of each TRN vertex, according to the CONN graph.}

\item{\code{OT_deg}}{The degree (number of incident edges) of each TRN vertex, according to the output space topology.}

\item{\code{CADJ_wdeg}}{The weighted degree of each TRN vertex (sum of edge weights emanating from each vertex), according to the CADJ graph.}

\item{\code{CONN_wdeg}}{The weighted degree of each TRN vertex (sum of edge weights emanating from each vertex), according to the CONN graph.}

\item{\code{CADJ_fwdflen}}{The forward folding length of each CADJ edge listed in \code{CADJ_EL}. 
This is the geodesic distance of each edge, measured on the TRN's output topology.}

\item{\code{CONN_fwdflen}}{The forward folding length of each CONN edge listed in \code{CONN_EL}. 
This is the geodesic distance of each edge, measured on the TRN's output topology.}

\item{\code{CADJ_bwdflen}}{The backward folding length (geodesic distance) of each edge in the TRN's output topology, measured on the CADJ graph. 
\code{length = nrow(OT_EL)}.}

\item{\code{CONN_bwdflen}}{The backward folding length (geodesic distance) of each edge in the TRN's output topology, measured on the CONN graph. 
\code{length = nrow(OT_EL)}.}

\item{\code{CADJ_TP_radius}}{The neighborhood size on the TRN's output topology which would preserve all of the topological adjacencies 
found in the CADJ graph, if all of these adjacencies were packed into a neighborhood of this radius.}

\item{\code{CONN_TP_radius}}{The neighborhood size on the TRN's output topology which would preserve all of the topological adjacencies 
found in the CONN graph, if all of these adjacencies were packed into a neighborhood of this radius.}

\item{\code{OT_geodesic_dist}}{The geodesic distance between TRN vertices, measured according to its output topology.}

\item{\code{OT_max_dist}}{The maximum geodesic distance between any two TRN vertices, measured according to its output topology.}

\item{\code{OT_nhb_sizes}}{The cumulative number of neighbors of each TRN vertex at all possible geodesic distances in its output topology,
stored in a \code{nV} x \code{OT_max_dist} matrix.}

\item{\code{CADJ_lrank}}{The CADJvis local rank of each CADJ edge in \code{CADJ_EL}.}

\item{\code{CADJ_grank}}{The CADJvis global rank of each CADJ edge in \code{CADJ_EL}.}

\item{\code{CONN_lrank}}{The CONNvis local rank of each CONN edge in \code{CONN_EL}.}

\item{\code{CONN_grank}}{The CONNvis global rank of each CONN edge in \code{CONN_EL}.}

\item{\code{CADJ_active}}{Indicator flag identifying whether each edge in \code{CADJ_EL} is active (=1) or not (=0). 
"active" = un-pruned, i.e. not removed by thresholding (so all edges are active until any of the \code{prune_CADJ_*} methods are called).}

\item{\code{CONN_active}}{Indicator flag identifying whether each edge in \code{CONN_EL} is active (=1) or not (=0). 
"active" = un-pruned, i.e. not removed by thresholding (so all edges are active until any of the \code{prune_CONN_*} methods are called).}

\item{\code{TopoProd}}{The Topographic Product of the TRN. See \code{?set_TopoPresMeasures} for details.}

\item{\code{CADJ_TopoFxns}}{The suite of Topographic Functions of the CADJ graph. See \code{?set_TopoPresMeasures} for details.}

\item{\code{CONN_TopoFxns}}{The suite of Topographic Functions of the CONN graph. See \code{?set_TopoPresMeasures} for details.}

\item{\code{CADJ_BootSig}}{The significance values for each edge in \code{CADJ_EL}, as derived from a bootstrapped re-sampling procedure.}

\item{\code{CONN_BootSig}}{The significance values for each edge in \code{CONN_EL}, as derived from a bootstrapped re-sampling procedure.}

\item{\code{DMP_prior}}{The DM-Prune priors for each edge in \code{CADJ_EL}.}

\item{\code{DMP_mu_G}}{The DM-Prune global \eqn{\mu} score for each edge in \code{CADJ_EL}.}

\item{\code{DMP_mu_N}}{The DM-Prune local \eqn{\mu} score for each edge in \code{CADJ_EL}.}

\item{\code{DMP_mu_L}}{The DM-Prune length \eqn{\mu} score for each edge in \code{CADJ_EL}.}

\item{\code{DMP_mu_S}}{The DM-Prune bootstrap significance \eqn{\mu} score for each edge in \code{CADJ_EL}.}

\item{\code{DMP_mu}}{The DM-Prune composite \eqn{\mu} score for each edge in \code{CADJ_EL}.}

\item{\code{DMP_mu_rank}}{The rank of each edge in \code{CADJ_EL}, according to their DM-Prune composite \eqn{\mu} scores. 
The ranking mechanism is ascending and dense, meaning the edge with the lowest \eqn{\mu} has \code{rank = 1}, 
and any edges with identical \eqn{mu} scores share the same rank.}

\item{\code{DMP_pruneStep}}{The unique prune steps at which the DM-Prune \eqn{\Lambda}-path is calculated. 
These steps are the unique values in \code{DMP_mu_rank}.}

\item{\code{DMP_Lambda}}{The DM-Prune \eqn{\Lambda} path, computed at each step in \code{DMP_pruneStep}.}

\item{\code{isinit}}{Flag indicating whether \code{initialize_TRN} has been called.}

\item{\code{isset_TPM}}{Flag indicating whether \code{calc_TopoMeasures} has been called.}

\item{\code{isset_DMPrune}}{Flag indicating whether \code{calc_DMPrune_LambdaPath} has been called.}
}}

\section{Methods}{

Each class method has its own documentation, accessible via \code{?TopoRNet::<method_name>}. 
For completeness, the list is repeated here in entirety.  Additional functionality 
for visualizing a TRN object is available through the \code{vis_*} functions. 
See their documentation for more information. 

\describe{
\item{\code{TRN$new}}{Instantiate a TRN object.}
\item{\code{set_parallel}}{Set the parallel computation flag.}
\item{\code{initialize_TRN}}{Initialize a TRN object with CADJ and output topology adjacency matrices.}
\item{\code{get_CADJvis_stats}}{Get the CADJvis summary statistics, grouped by \code{lrank}, \code{grank}, or \code{length}.}
\item{\code{get_CADJvis_colors}}{Get the CADJvis colors of each edge in \code{CADJ_EL}, used for producing the CADJvis.}
\item{\code{get_CADJvis_widths}}{Get the CADJvis line widths of each edge in \code{CADJ_EL}, used for producing the CADJvis.}
\item{\code{get_CONNvis_stats}}{Get the CONNvis summary statistics, grouped by \code{lrank}, \code{grank}, or \code{length}.}
\item{\code{get_CONNvis_colors}}{Get the CONNvis colors of each edge in \code{CONN_EL}, used for producing the CONNvis.}
\item{\code{get_CONNvis_widths}}{Get the CONNvis line widths of each edge in \code{CONN_EL}, used for producing the CONNvis.}
\item{\code{prune_CADJ_edge_list}}{Prune the CADJ graph given a list of edges to remove.}
\item{\code{prune_CADJ_edge_id}}{Prune the CADJ graph given a list of edge IDs to remove.}
\item{\code{prune_CADJ_vertex_id}}{Prune the CADJ graph by removing edges connecting vertices in a list of given vertex IDs.}
\item{\code{prune_CADJ_edge_weight}}{Prune the CADJ graph by removing edges whose weights are < a given minimum edge weight.}
\item{\code{prune_CADJ_lrank}}{Prune the CADJ graph by removing edges whose \code{CADJ_lrank} is > a given maximum lrank.}
\item{\code{prune_CADJ_grank}}{Prune the CADJ graph by removing edges whose \code{CADJ_grank} is > a given maximum grank.}
\item{\code{prune_CADJ_length}}{Prune the CADJ graph by removing edges whose \code{CADJ_fwdflen} is > a given maximim forward folding length.}
\item{\code{prune_CADJ_wdeg}}{Prune the CADJ graph by removing edges incident to vertices whose \code{CADJ_wdeg} is < a given minimum weighted degree.}
\item{\code{get_CADJ}}{Get the CADJ adjacency matrix of all \code{CADJ_active} edges (i.e., the adjacency matrix returned excludes any pruned edges).}
\item{\code{restore_CADJ_edges}}{Set all edges in \code{CADJ_EL} as active, which erases any graph pruning that has been done via the \code{prune_CADJ_*} methods.}
\item{\code{prune_CONN_edge_list}}{Prune the CONN graph given a list of edges to remove.}
\item{\code{prune_CONN_edge_id}}{Prune the CONN graph given a list of edge IDs to remove.}
\item{\code{prune_CONN_vertex_id}}{Prune the CONN graph by removing edges connecting vertices in a list of given vertex IDs.}
\item{\code{prune_CONN_edge_weight}}{Prune the CONN graph by removing edges whose weights are < a given minimum edge weight.}
\item{\code{prune_CONN_lrank}}{Prune the CONN graph by removing edges whose \code{CONN_lrank} is > a given maximum lrank.}
\item{\code{prune_CONN_grank}}{Prune the CONN graph by removing edges whose \code{CONN_grank} is > a given maximum grank.}
\item{\code{prune_CONN_length}}{Prune the CONN graph by removing edges whose \code{CONN_fwdflen} is > a given maximim forward folding length.}
\item{\code{prune_CONN_wdeg}}{Prune the CONN graph by removing edges incident to vertices whose \code{CONN_wdeg} is < a given minimum weighted degree.}
\item{\code{prune_CONN_CADJ}}{Prune the CONN graph by removing CADJ inactive edges.}
\item{\code{get_CONN}}{Get the CONN adjacency matrix of all \code{CONN_active} edges (i.e., the adjacency matrix returned excludes any pruned edges).}
\item{\code{restore_CONN_edges}}{Set all edges in \code{CONN_EL} as active, which erases any graph pruning that has been done via the \code{prune_CONN_*} methods.}
\item{\code{get_OTADJ}}{Get the adjacency matrix of the output space topology of the TRN. This is the same adjacency that was given (and stored) during a call to \code{initialize_TRN}.}
\item{\code{CADJ_active_verts}}{Return a list of vertex IDs that are connected by any \code{CADJ_active} edge.}
\item{\code{CONN_active_verts}}{Return a list of vertex IDs that are connected by any \code{CONN_active} edge.}
\item{\code{calc_TopoMeasures}}{Sets the Topology Preserving Measures of both the CADJ and CONN graphs (Topographic Product and several Topographic Functions).}
\item{\code{set_BootSig}}{Set the Bootstrap significance values of each CADJ and CONN edge.}
\item{\code{calc_DMPrune_LambdaPath}}{Calculate the DM-Prune Lambda path.}
\item{\code{DMPrune_CADJ_step}}{Prune the CADJ graph by removing edges in \code{CADJ_EL} whose \code{DMP_mu_rank} is < a given minimum prune step.}
\item{\code{save}}{Save a TRN object to disk}
\item{\code{load}}{Load a previously saved TRN object from disk}
\item{\code{as_list}}{Convert and return all fields of a TRN object to an R list.}
\item{\code{load_list}}{Populate an instance of a TRN object from an R list.}
}
}

